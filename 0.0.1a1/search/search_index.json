{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get started","text":""},{"location":"#finesql-orm","title":"FineSQL ORM","text":"<p>FineSQL is a lightweight Python ORM built on top of <code>sqlite3</code> for educational purposes. It provides simple table definitions, CRUD operations, and foreign key support while keeping the codebase minimal and easy to understand.</p>"},{"location":"#installation","title":"Installation","text":"<p>FineSQL requires only standard Python libraries and can be installed easily.</p> pipuv <p> <pre><code>$ pip install finesql\n---&gt; 100%\nSuccessfully installed finesql\n</code></pre> </p> <p> <pre><code>$ uv add finesql\n---&gt; 100%\nSuccessfully installed finesql\n</code></pre> </p>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#1-define-tables","title":"1. Define Tables","text":"<pre><code>from finesql import Database, Table, Column, ForeignKey\n\nclass User(Table):\n    username = Column(str)\n    age = Column(int)\n\nclass Post(Table):\n    title = Column(str)\n    body = Column(str)\n    author = ForeignKey(User)\n</code></pre>"},{"location":"#2-initialize-database","title":"2. Initialize Database","text":"<pre><code>db = Database(\"app.db\")\n\ndb.create(User)\ndb.create(Post)\n</code></pre>"},{"location":"#3-create-records","title":"3. Create Records","text":"<pre><code># Create users\nalice = User(full_name=\"Alice Johnson\", age=25)\ndb.save(alice)\n\nrobert = User(full_name=\"Robert Smith\", age=30)\ndb.save(robert)\n\n# Create a post\npost = Post(title=\"Hello World\", body=\"This is my first post\", author=robert)\ndb.save(post)\n</code></pre>"},{"location":"#4-query-records","title":"4. Query Records","text":"<pre><code># Get all users\nusers = db.all(User)\nprint(users)\n\n# Get by id\nuser1 = db.get(User, id=1)\nprint(user1)\n\n# Filter by full_name (reuse first name)\nalice = db.get_by_field(User, field_name=\"full_name\", value=\"Alice Johnson\")\nprint(alice)\n\nrobert = db.get_by_field(User, field_name=\"full_name\", value=\"Robert Smith\")\nprint(robert)\n</code></pre>"},{"location":"#5-update-records","title":"5. Update Records","text":"<pre><code>alice = db.get(User, id=1)\nalice.age = 26\ndb.update(alice)\n</code></pre>"},{"location":"#6-delete-records","title":"6. Delete Records","text":"<pre><code>db.delete(User, id=1)\n</code></pre>"},{"location":"#relationships","title":"Relationships","text":"<p>Foreign keys can be defined using <code>ForeignKey</code>. For example, <code>Post</code> has an <code>author = ForeignKey(User)</code>. When fetching posts, the related <code>User</code> instance will be automatically resolved:</p> <pre><code>post = db.get(Post, id=1)\nprint(post.author)\n</code></pre>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#database","title":"<code>Database</code>","text":"<ul> <li><code>create(table)</code> \u2192 Creates a table.</li> <li><code>save(instance)</code> \u2192 Inserts a record.</li> <li><code>all(table)</code> \u2192 Returns all records.</li> <li><code>get(table, id)</code> \u2192 Get record by id.</li> <li><code>get_by_field(table, field_name, value)</code> \u2192 LIKE search by field.</li> <li><code>update(instance)</code> \u2192 Updates a record.</li> <li><code>delete(table, id)</code> \u2192 Deletes a record.</li> </ul>"},{"location":"api/#table","title":"<code>Table</code>","text":"<ul> <li>Base class for all models.</li> <li>Automatically provides <code>id</code> field.</li> <li>Column and ForeignKey definitions supported.</li> </ul>"},{"location":"api/#column","title":"<code>Column</code>","text":"<ul> <li>Define a typed column (<code>int</code>, <code>str</code>, <code>float</code>, <code>bool</code>, <code>bytes</code>).</li> </ul>"},{"location":"api/#foreignkey","title":"<code>ForeignKey</code>","text":"<ul> <li>Define foreign key to another table.</li> </ul>"},{"location":"api/#column-types","title":"Column Types","text":"Type SQLite Description <code>str</code> TEXT String data <code>int</code> INTEGER Integer numbers <code>float</code> REAL Floating-point numbers <code>bool</code> INTEGER Boolean values <code>bytes</code> BLOB Binary data"},{"location":"contributing/","title":"Contributing","text":"<p>First, you might want to see the basic ways to help FineSQL and get help.</p>"},{"location":"contributing/#developing","title":"Developing","text":"<p>If you already cloned the finesql repository and you want to deep dive in the code, here are some guidelines to set up your environment.</p>"},{"location":"contributing/#virtual-environment","title":"Virtual Environment","text":"<p>Follow the instructions to create and activate a virtual environment as described in the FineSQL page on Virtual Environments for the internal code of <code>finesql</code>.</p>"},{"location":"contributing/#install-requirements-using-pip","title":"Install Requirements Using <code>pip</code>","text":"<p>After activating the environment, install the required packages:</p> <pre><code>$ pip install -r requirements.txt\n\n---&gt; 100%\n</code></pre> <p>It will install all the dependencies and your local FineSQL in your local environment.</p>"},{"location":"contributing/#using-your-local-finesql","title":"Using your Local FineSQL","text":"<p>If you create a Python file that imports and uses FineSQL, and run it with the Python from your local environment, it will use your cloned local FineSQL source code.</p> <p>And if you update that local FineSQL source code when you run that Python file again, it will use the fresh version of FineSQL you just edited.</p> <p>That way, you don't have to \"install\" your local version to be able to test every change.</p> <p>\"Technical Details\"</p> <p>This only happens when you install using this included <code>requirements.txt</code> instead of running <code>pip install finesql</code> directly.</p> <p>That is because inside the <code>requirements.txt</code> file, the local version of FineSQL is marked to be installed in \"editable\" mode, with the <code>-e</code> option.</p>"},{"location":"contributing/#format","title":"Format","text":"<p>There is a script that you can run that will format and clean all your code:</p> <pre><code>$ bash scripts/format.sh\n</code></pre> <p>It will also auto-sort all your imports.</p>"},{"location":"contributing/#tests","title":"Tests","text":"<p>There is a script that you can run locally to test all the code and generate coverage reports in HTML:</p> <pre><code>$ bash scripts/test.sh\n</code></pre> <p>This command generates a directory <code>./htmlcov/</code>, if you open the file <code>./htmlcov/index.html</code> in your browser, you can explore interactively the regions of code that are covered by the tests, and notice if there is any region missing.</p>"},{"location":"contributing/#docs","title":"Docs","text":"<p>First, make sure you set up your environment as described above, that will install all the requirements.</p>"},{"location":"contributing/#docs-live","title":"Docs Live","text":"<p>During local development, there is a script that builds the site and checks for any changes, live-reloading:</p> <pre><code>$ python ./scripts/docs.py live\n\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Serving on http://127.0.0.1:8008\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start watching changes\n&lt;span style=\"color: green;\"&gt;[INFO]&lt;/span&gt; Start detecting changes\n</code></pre> <p>It will serve the documentation on <code>http://127.0.0.1:8008</code>.</p> <p>That way, you can edit the documentation/source files and see the changes live.</p> <p>Tip</p> <p>Alternatively, you can perform the same steps that scripts does manually.</p> <p>Go into the docs director at <code>docs/</code>:</p> <pre><code>$ cd docs/\n</code></pre> <p>Then run <code>mkdocs</code> in that directory:</p> <pre><code>$ mkdocs serve --dev-addr 8008\n</code></pre>"},{"location":"contributing/#typer-cli-optional","title":"Typer CLI (Optional)","text":"<p>The instructions here show you how to use the script at <code>./scripts/docs.py</code> with the <code>python</code> program directly.</p> <p>But you can also use Typer CLI, and you will get autocompletion in your terminal for the commands after installing completion.</p> <p>If you install Typer CLI, you can install completion with:</p> <pre><code>$ typer --install-completion\n\nzsh completion installed in /home/user/.bashrc.\nCompletion will take effect once you restart the terminal.\n</code></pre>"},{"location":"contributing/#docs-structure","title":"Docs Structure","text":"<p>The documentation uses MkDocs.</p> <p>And there are extra tools/scripts in place in <code>./scripts/docs.py</code>.</p> <p>Tip</p> <p>You don't need to see the code in <code>./scripts/docs.py</code>, you just use it in the command line.</p> <p>All the documentation is in Markdown format in the directory <code>./docs</code>.</p> <p>Many of the tutorials have blocks of code.</p> <p>In most of the cases, these blocks of code are actual complete applications that can be run as is.</p> <p>In fact, those blocks of code are not written inside the Markdown, they are Python files in the <code>./docs_src/</code> directory.</p> <p>And those Python files are included/injected in the documentation when generating the site.</p>"},{"location":"contributing/#docs-for-tests","title":"Docs for Tests","text":"<p>Most of the tests actually run against the example source files in the documentation.</p> <p>This helps to make sure that:</p> <ul> <li>The documentation is up-to-date.</li> <li>The documentation examples can be run as is.</li> <li>Most of the features are covered by the documentation, ensured by test coverage.</li> </ul>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#blog-system","title":"Blog System","text":"<pre><code>from finesql import Database, Table, Column, ForeignKey\n\nclass User(Table):\n    username = Column(str)\n    email = Column(str)\n\nclass Post(Table):\n    title = Column(str)\n    content = Column(str)\n    author = ForeignKey(User)\n\ndb = Database(\"blog.db\")\ndb.create(User)\ndb.create(Post)\n\n# Create user\nuser = User(username=\"alice\", email=\"alice@blog.com\")\ndb.save(user)\n\n# Create post\npost = Post(title=\"My First Post\", content=\"Hello world!\", author=user)\ndb.save(post)\n\n# Query with relationships\npost = db.get(Post, id=1)\nprint(f\"'{post.title}' by {post.author.username}\")\n</code></pre>"},{"location":"examples/#todo-app","title":"Todo App","text":"<pre><code>from finesql import Database, Table, Column\n\nclass Todo(Table):\n    title = Column(str)\n    completed = Column(bool)\n    priority = Column(int)\n\ndb = Database(\"todo.db\")\ndb.create(Todo)\n\ntodo = Todo(title=\"Learn FineSQL\", completed=False, priority=1)\ndb.save(todo)\n\n# Mark as completed\ntodo.completed = True\ntodo = db.update(todo)\nprint(todo)\n</code></pre>"},{"location":"help/","title":"Help FineSQL - Get Help","text":"<p>Do you like FineSQL?</p> <p>Would you like to help FineSQL, other users, and the author?</p> <p>Or would you like to get help with FineSQL?</p> <p>There are very simple ways to help (several involve just one or two clicks).</p> <p>And there are several ways to get help too.</p>"},{"location":"help/#try-it","title":"Try It","text":"<p>The main thing you can do is try FineSQL out and see if this library API design is helpful for you.</p> <p>Knowing if it's useful or if you find any obvious problem with its design would be helpful.</p>"},{"location":"help/#subscribe-to-the-finesql-and-friends-newsletter","title":"Subscribe to the FineSQL and Friends newsletter","text":"<p>You can subscribe to the (infrequent) FineSQL and friends to stay updated about:</p> <ul> <li>News about FineSQL and friends, including FineSQL \ud83d\ude80</li> <li>Guides \ud83d\udcdd</li> <li>Features \u2728</li> <li>Breaking changes \ud83d\udea8</li> <li>Tips and tricks \u2705</li> </ul>"},{"location":"help/#star-finesql-in-github","title":"Star FineSQL in GitHub","text":"<p>You can \"star\" FineSQL in GitHub (clicking the star button at the top right): https://github.com/goldendevuz/finesql. \u2b50\ufe0f</p> <p>By adding a star, other users will be able to find it more easily and see that it has been already useful for others.</p>"},{"location":"help/#watch-the-github-repository-for-releases","title":"Watch the GitHub repository for releases","text":"<p>You can \"watch\" FineSQL in GitHub (clicking the \"watch\" button at the top right): https://github.com/goldendevuz/finesql. \ud83d\udc40</p> <p>There you can select \"Releases only\".</p> <p>By doing it, you will receive notifications (in your email) whenever there's a new release (a new version) of FineSQL with bug fixes and new features.</p>"},{"location":"help/#connect-with-the-author","title":"Connect with the author","text":"<p>You can connect with me (Abdulmajid Yunus / <code>goldendevuz</code>), the author.</p> <p>You can:</p> <ul> <li>Follow me on GitHub.<ul> <li>See other Open Source projects I have created that could help you.</li> <li>Follow me to see when I create a new Open Source project.</li> </ul> </li> <li>Follow me on Telegram.<ul> <li>Tell me how you use FineSQL (I love to hear that).</li> <li>Hear when I make announcements or release new tools.</li> </ul> </li> <li>Connect with me on Linkedin.<ul> <li>Hear when I make announcements or release new tools (although I use Telegram more often \ud83e\udd37\u200d\u2642).</li> </ul> </li> <li>Read what I write (or follow me) on Dev.to or Medium.<ul> <li>Read other ideas, articles, and read about tools I have created.</li> <li>Follow me to read when I publish something new.</li> </ul> </li> </ul>"},{"location":"help/#tweet-about-finesql","title":"Tweet about FineSQL","text":"<p>Tweet about FineSQL and let me and others know why you like it. \ud83c\udf89</p> <p>I love to hear about how FineSQL is being used, what you have liked in it, in which project/company are you using it, etc.</p>"},{"location":"help/#help-others-with-questions-in-github","title":"Help others with questions in GitHub","text":"<p>You can try and help others with their questions in:</p> <ul> <li>GitHub Discussions</li> <li>GitHub Issues</li> </ul> <p>In many cases you might already know the answer for those questions. \ud83e\udd13</p> <p>Just remember, the most important point is: try to be kind. People come with their frustrations and in many cases don't ask in the best way, but try as best as you can to be kind. \ud83e\udd17</p> <p>The idea is for the FineSQL community to be kind and welcoming. At the same time, don't accept bullying or disrespectful behavior towards others. We have to take care of each other.</p> <p>Here's how to help others with questions (in discussions or issues):</p>"},{"location":"help/#understand-the-question","title":"Understand the question","text":"<ul> <li> <p>Check if you can understand what is the purpose and use case of the person asking.</p> </li> <li> <p>Then check if the question (the vast majority are questions) is clear.</p> </li> <li> <p>In many cases the question asked is about an imaginary solution from the user, but there might be a better one. If you can understand the problem and use case better, you might be able to suggest a better alternative solution.</p> </li> <li> <p>If you can't understand the question, ask for more details.</p> </li> </ul>"},{"location":"help/#reproduce-the-problem","title":"Reproduce the problem","text":"<p>For most of the cases and most of the questions there's something related to the person's original code.</p> <p>In many cases they will only copy a fragment of the code, but that's not enough to reproduce the problem.</p> <ul> <li> <p>You can ask them to provide a minimal, reproducible, example, that you can copy-paste and run locally to see the same error or behavior they are seeing, or to understand their use case better.</p> </li> <li> <p>If you are feeling too generous, you can try to create an example like that yourself, just based on the description of the problem. Just have in mind that this might take a lot of time and it might be better to ask them to clarify the problem first.</p> </li> </ul>"},{"location":"help/#suggest-solutions","title":"Suggest solutions","text":"<ul> <li> <p>After being able to understand the question, you can give them a possible answer.</p> </li> <li> <p>In many cases, it's better to understand their underlying problem or use case, because there might be a better way to solve it than what they are trying to do.</p> </li> </ul>"},{"location":"help/#ask-to-close","title":"Ask to close","text":"<p>If they reply, there's a high chance you would have solved their problem, congrats, you're a hero! \ud83e\uddb8</p> <ul> <li> <p>Now, if that solved their problem, you can ask them to:</p> <ul> <li>In GitHub Discussions: mark the comment as the answer.</li> <li>In GitHub Issues: close the issue**.</li> </ul> </li> </ul>"},{"location":"help/#watch-the-github-repository","title":"Watch the GitHub repository","text":"<p>You can \"watch\" FineSQL in GitHub (clicking the \"watch\" button at the top right): https://github.com/goldendevuz/finesql. \ud83d\udc40</p> <p>If you select \"Watching\" instead of \"Releases only\" you will receive notifications when someone creates a new issue or question. You can also specify that you only want to be notified about new issues, or discussions, or PRs, etc.</p> <p>Then you can try and help them solve those questions.</p>"},{"location":"help/#ask-questions","title":"Ask Questions","text":"<p>You can create a new issue in the GitHub repository, for example to:</p> <ul> <li>Ask a question or ask about a problem.</li> <li>Suggest a new feature.</li> </ul> <p>Note: if you create an issue, then I'm going to ask you to also help others. \ud83d\ude09</p>"},{"location":"help/#review-pull-requests","title":"Review Pull Requests","text":"<p>You can help me review pull requests from others.</p> <p>Again, please try your best to be kind. \ud83e\udd17</p> <p>Here's what to have in mind and how to review a pull request:</p>"},{"location":"help/#understand-the-problem","title":"Understand the problem","text":"<ul> <li> <p>First, make sure you understand the problem that the pull request is trying to solve. It might have a longer discussion in a GitHub Discussion or issue.</p> </li> <li> <p>There's also a good chance that the pull request is not actually needed because the problem can be solved in a different way. Then you can suggest or ask about that.</p> </li> </ul>"},{"location":"help/#dont-worry-about-style","title":"Don't worry about style","text":"<ul> <li> <p>Don't worry too much about things like commit message styles, I will squash and merge customizing the commit manually.</p> </li> <li> <p>Also don't worry about style rules, there are already automatized tools checking that.</p> </li> </ul> <p>And if there's any other style or consistency need, I'll ask directly for that, or I'll add commits on top with the needed changes.</p>"},{"location":"help/#check-the-code","title":"Check the code","text":"<ul> <li> <p>Check and read the code, see if it makes sense, run it locally and see if it actually solves the problem.</p> </li> <li> <p>Then comment saying that you did that, that's how I will know you really checked it.</p> </li> </ul> <p>Info</p> <p>Unfortunately, I can't simply trust PRs that just have several approvals.</p> <p>Several times it has happened that there are PRs with 3, 5 or more approvals, probably because the description is appealing, but when I check the PRs, they are actually broken, have a bug, or don't solve the problem they claim to solve. \ud83d\ude05</p> <p>So, it's really important that you actually read and run the code, and let me know in the comments that you did. \ud83e\udd13</p> <ul> <li>If the PR can be simplified in a way, you can ask for that, but there's no need to be too picky, there might be a lot of subjective points of view (and I will have my own as well \ud83d\ude48), so it's better if you can focus on the fundamental things.</li> </ul>"},{"location":"help/#tests","title":"Tests","text":"<ul> <li> <p>Help me check that the PR has tests.</p> </li> <li> <p>Check that the tests fail before the PR. \ud83d\udea8</p> </li> <li> <p>Then check that the tests pass after the PR. \u2705</p> </li> <li> <p>Many PRs don't have tests, you can remind them to add tests, or you can even suggest some tests yourself. That's one of the things that consume most time and you can help a lot with that.</p> </li> <li> <p>Then also comment what you tried, that way I'll know that you checked it. \ud83e\udd13</p> </li> </ul>"},{"location":"help/#create-a-pull-request","title":"Create a Pull Request","text":"<p>You can contribute to the source code with Pull Requests, for example:</p> <ul> <li>To fix a typo you found on the documentation.</li> <li>To propose new documentation sections.</li> <li>To fix an existing issue/bug.<ul> <li>Make sure to add tests.</li> </ul> </li> <li>To add a new feature.<ul> <li>Make sure to add tests.</li> <li>Make sure to add documentation if it's relevant.</li> </ul> </li> </ul>"},{"location":"help/#help-maintain-finesql","title":"Help Maintain FineSQL","text":"<p>Help me maintain FineSQL! \ud83e\udd13</p> <p>There's a lot of work to do, and for most of it, YOU can do it.</p> <p>The main tasks that you can do right now are:</p> <ul> <li>Help others with questions in GitHub (see the section above).</li> <li>Review Pull Requests (see the section above).</li> </ul> <p>Those two tasks are what consume time the most. That's the main work of maintaining FineSQL.</p> <p>If you can help me with that, you are helping me maintain FineSQL and making sure it keeps advancing faster and better. \ud83d\ude80</p>"},{"location":"help/#join-the-chat","title":"Join the chat","text":"<p>Join the \ud83d\udc65 FineSQL and Friends Discord chat server \ud83d\udc65 and hang out with others in the community. There's an <code>#finesql</code> channel.</p> <p>Tip</p> <p>For questions, ask them in GitHub Discussions, there's a much better chance you will receive help there.</p> <p>Use the chat only for other general conversations.</p>"},{"location":"help/#dont-use-the-chat-for-questions","title":"Don't use the chat for questions","text":"<p>Have in mind that as chats allow more \"free conversation\", it's easy to ask questions that are too general and more difficult to answer, so, you might not receive answers.</p> <p>In GitHub, the template will guide you to write the right question so that you can more easily get a good answer, or even solve the problem yourself even before asking. And in GitHub I can make sure I always answer everything, even if it takes some time. I can't personally do that with the chat. \ud83d\ude05</p> <p>Conversations in the chat are also not as easily searchable as in GitHub, so questions and answers might get lost in the conversation.</p> <p>On the other side, there are thousands of users in the chat, so there's a high chance you'll find someone to talk to there, almost all the time. \ud83d\ude04</p>"},{"location":"help/#sponsor-the-author","title":"Sponsor the author","text":"<p>You can also financially support the author (me) through GitHub sponsors.</p> <p>There you could buy me a coffee \u2615\ufe0f to say thanks. \ud83d\ude04</p> <p>Thanks! \ud83d\ude80</p>"},{"location":"management-tasks/","title":"Repository Management Tasks","text":"<p>These are the tasks that can be performed to manage the FineSQL repository by team members.</p> <p>Tip</p> <p>This section is useful only to a handful of people, team members with permissions to manage the repository. You can probably skip it. \ud83d\ude09</p> <p>...so, you are a team member of FineSQL? Wow, you are so cool! \ud83d\ude0e</p> <p>You can help with everything on Help FineSQL - Get Help the same ways as external contributors. But additionally, there are some tasks that only you (as part of the team) can perform.</p> <p>Here are the general instructions for the tasks you can perform.</p> <p>Thanks a lot for your help. \ud83d\ude47</p>"},{"location":"management-tasks/#be-nice","title":"Be Nice","text":"<p>First of all, be nice. \ud83d\ude0a</p> <p>You probably are super nice if you were added to the team, but it's worth mentioning it. \ud83e\udd13</p>"},{"location":"management-tasks/#when-things-are-difficult","title":"When Things are Difficult","text":"<p>When things are great, everything is easier, so that doesn't need much instructions. But when things are difficult, here are some guidelines.</p> <p>Try to find the good side. In general, if people are not being unfriendly, try to thank their effort and interest, even if you disagree with the main subject (discussion, PR), just thank them for being interested in the project, or for having dedicated some time to try to do something.</p> <p>It's difficult to convey emotion in text, use emojis to help. \ud83d\ude05</p> <p>In discussions and PRs, in many cases, people bring their frustration and show it without filter, in many cases exaggerating, complaining, being entitled, etc. That's really not nice, and when it happens, it lowers our priority to solve their problems. But still, try to breath, and be gentle with your answers.</p> <p>Try to avoid using bitter sarcasm or potentially passive-aggressive comments. If something is wrong, it's better to be direct (try to be gentle) than sarcastic.</p> <p>Try to be as specific and objective as possible, avoid generalizations.</p> <p>For conversations that are more difficult, for example to reject a PR, you can ask me (@goldendevuz) to handle it directly.</p>"},{"location":"management-tasks/#edit-pr-titles","title":"Edit PR Titles","text":"<ul> <li>Edit the PR title to start with an emoji from gitmoji.<ul> <li>Use the emoji character, not the GitHub code. So, use <code>\ud83d\udc1b</code> instead of <code>:bug:</code>. This is so that it shows up correctly outside of GitHub, for example in the release notes.</li> </ul> </li> <li>Start the title with a verb. For example <code>Add</code>, <code>Refactor</code>, <code>Fix</code>, etc. This way the title will say the action that the PR does. Like <code>Add support for teleporting</code>, instead of <code>Teleporting wasn't working, so this PR fixes it</code>.</li> <li>Edit the text of the PR title to start in \"imperative\", like giving an order. So, instead of <code>Adding support for teleporting</code> use <code>Add support for teleporting</code>.</li> <li>Try to make the title descriptive about what it achieves. If it's a feature, try to describe it, for example <code>Add support for teleporting</code> instead of <code>Create TeleportAdapter class</code>.</li> <li>Do not finish the title with a period (<code>.</code>).</li> </ul> <p>Once the PR is merged, a GitHub Action (latest-changes) will use the PR title to update the latest changes automatically.</p> <p>So, having a nice PR title will not only look nice in GitHub, but also in the release notes. \ud83d\udcdd</p>"},{"location":"management-tasks/#add-labels-to-prs","title":"Add Labels to PRs","text":"<p>The same GitHub Action latest-changes uses one label in the PR to decide the section in the release notes to put this PR in.</p> <p>Make sure you use a supported label from the latest-changes list of labels:</p> <ul> <li><code>breaking</code>: Breaking Changes<ul> <li>Existing code will break if they update the version without changing their code. This rarely happens, so this label is not frequently used.</li> </ul> </li> <li><code>security</code>: Security Fixes<ul> <li>This is for security fixes, like vulnerabilities. It would almost never be used.</li> </ul> </li> <li><code>feature</code>: Features<ul> <li>New features, adding support for things that didn't exist before.</li> </ul> </li> <li><code>bug</code>: Fixes<ul> <li>Something that was supported didn't work, and this fixes it. There are many PRs that claim to be bug fixes because the user is doing something in an unexpected way that is not supported, but they considered it what should be supported by default. Many of these are actually features or refactors. But in some cases there's an actual bug.</li> </ul> </li> <li><code>refactor</code>: Refactors<ul> <li>This is normally for changes to the internal code that don't change the behavior. Normally it improves maintainability, or enables future features, etc.</li> </ul> </li> <li><code>upgrade</code>: Upgrades<ul> <li>This is for upgrades to direct dependencies from the project, or extra optional dependencies, normally in <code>pyproject.toml</code>. So, things that would affect final users, they would end up receiving the upgrade in their code base once they update. But this is not for upgrades to internal dependencies used for development, testing, docs, etc. Those internal dependencies, normally in <code>requirements.txt</code> files or GitHub Action versions should be marked as <code>internal</code>, not <code>upgrade</code>.</li> </ul> </li> <li><code>docs</code>: Docs<ul> <li>Changes in docs. This includes updating the docs, fixing typos. But it doesn't include changes to translations.</li> <li>You can normally quickly detect it by going to the \"Files changed\" tab in the PR and checking if the updated file(s) starts with <code>docs/en/docs</code>. The original version of the docs is always in English, so in <code>docs/en/docs</code>.</li> </ul> </li> <li><code>internal</code>: Internal<ul> <li>Use this for changes that only affect how the repo is managed. For example upgrades to internal dependencies, changes in GitHub Actions or scripts, etc.</li> </ul> </li> </ul> <p>Tip</p> <p>Some tools like Dependabot, will add some labels, like <code>dependencies</code>, but have in mind that this label is not used by the <code>latest-changes</code> GitHub Action, so it won't be used in the release notes. Please make sure one of the labels above is added.</p>"},{"location":"management-tasks/#review-prs","title":"Review PRs","text":"<p>If a PR doesn't explain what it does or why, ask for more information.</p> <p>A PR should have a specific use case that it is solving.</p> <ul> <li>If the PR is for a feature, it should have docs.<ul> <li>Unless it's a feature we want to discourage, like support for a corner case that we don't want users to use.</li> </ul> </li> <li>The docs should include a source example file, not write Python directly in Markdown.</li> <li>If the source example(s) file can have different syntax for Python 3.8, 3.9, 3.10, there should be different versions of the file, and they should be shown in tabs in the docs.</li> <li>There should be tests testing the source example.</li> <li>Before the PR is applied, the new tests should fail.</li> <li>After applying the PR, the new tests should pass.</li> <li>Coverage should stay at 100%.</li> <li>If you see the PR makes sense, or we discussed it and considered it should be accepted, you can add commits on top of the PR to tweak it, to add docs, tests, format, refactor, remove extra files, etc.</li> <li>Feel free to comment in the PR to ask for more information, to suggest changes, etc.</li> <li>Once you think the PR is ready, move it in the internal GitHub project for me to review it.</li> </ul>"},{"location":"management-tasks/#dependabot-prs","title":"Dependabot PRs","text":"<p>Dependabot will create PRs to update dependencies for several things, and those PRs all look similar, but some are way more delicate than others.</p> <ul> <li>If the PR is for a direct dependency, so, Dependabot is modifying <code>pyproject.toml</code>, don't merge it. \ud83d\ude31 Let me check it first. There's a good chance that some additional tweaks or updates are needed.</li> <li>If the PR updates one of the internal dependencies, for example it's modifying <code>requirements.txt</code> files, or GitHub Action versions, if the tests are passing, the release notes (shown in a summary in the PR) don't show any obvious potential breaking change, you can merge it. \ud83d\ude0e</li> </ul>"},{"location":"management-tasks/#mark-github-discussions-answers","title":"Mark GitHub Discussions Answers","text":"<p>When a question in GitHub Discussions has been answered, mark the answer by clicking \"Mark as answer\".</p> <p>Many of the current Discussion Questions were migrated from old issues. Many have the label <code>answered</code>, that means they were answered when they were issues, but now in GitHub Discussions, it's not known what is the actual response from the messages.</p> <p>You can filter discussions by <code>Questions</code> that are <code>Unanswered</code>.</p>"},{"location":"management/","title":"Repository Management","text":"<p>Here's a short description of how the FineSQL repository is managed and maintained.</p>"},{"location":"management/#owner","title":"Owner","text":"<p>I, @goldendevuz, am the creator and owner of the FineSQL repository. \ud83e\udd13</p> <p>I normally give the final review to each PR before merging them. I make the final decisions on the project, I'm the BDFL. \ud83d\ude05</p>"},{"location":"management/#team","title":"Team","text":"<p>There's a team of people that help manage and maintain the project. \ud83d\ude0e</p> <p>They have different levels of permissions and specific instructions.</p> <p>Some of the tasks they can perform include:</p> <ul> <li>Adding labels to PRs.</li> <li>Editing PR titles.</li> <li>Adding commits on top of PRs to tweak them.</li> <li>Mark answers in GitHub Discussions questions, etc.</li> <li>Merge some specific types of PRs.</li> </ul> <p>Joining the team is by invitation only, and I could update or remove permissions, instructions, or membership.</p> <p>Additional to them, there's a large community of people helping each other and getting involved in the projects in different ways.</p>"},{"location":"management/#external-contributions","title":"External Contributions","text":"<p>External contributions are very welcome and appreciated, including answering questions, submitting PRs, etc. \ud83d\ude47\u200d\u2642\ufe0f</p> <p>There are many ways to help maintain FineSQL.</p>"},{"location":"release-notes/","title":"Changelog","text":"<p>All notable changes to this project are documented in this file.</p>"},{"location":"release-notes/#v002-2025-09-23","title":"v0.0.2 - 2025-09-23","text":"<ul> <li>Added support for <code>Column(..., default=...)</code> in models  </li> <li>By default, all fields now have a default value of <code>None</code>.  </li> <li>Developers can still specify a custom default if needed.  </li> <li>Example: <pre><code>class Hero(Model):\n    name = Column(str)               # default is None\n    age = Column(int, default=20)    # custom default value\n</code></pre></li> </ul>"},{"location":"release-notes/#v001-2025-09-23","title":"v0.0.1 - 2025-09-23","text":"<ul> <li>Initial version  </li> <li>Added documentation  </li> <li>Added history</li> </ul>"},{"location":"about/","title":"About","text":"<p>About FineSQL and how it is managed. \ud83e\udd13</p>"},{"location":"resources/","title":"Resources","text":"<p>Additional resources, how to help and get help, how to contribute, and more. \u2708\ufe0f</p>"}]}